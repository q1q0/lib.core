import { DynamicElement } from "./dynamic-element";
export declare class DynamicElementBuilder {
    private dynamicElement;
    private dropShadowColor;
    private dropShadowOffset;
    static createLabelElement(whiteSpaceWrap?: boolean, padding?: string): DynamicElementBuilder;
    toDynamicElement(): DynamicElement;
    setId(id: string): void;
    setText(text: string): void;
    setText2(text: string): void;
    setValue(value: string): void;
    setTooltip(tooltip: string): void;
    setVisible(visible: boolean): void;
    setEnabled(enabled: boolean): void;
    setPopup(popupMenuId: string): void;
    setBgColor(bgColor: string): void;
    addCssClass(cssClass: string): void;
    setBorderColor(borderColor: string): void;
    setBorderWidth(borderWidth: string): void;
    setBorderStyle(borderStyle: string): void;
    setHeight(height: string): void;
    setWidth(width: string): void;
    setX(x: string | number): void;
    setY(y: string | number): void;
    setZ(z: string | string): void;
    setFontBold(boo: string | boolean): void;
    setFontSize(size: string | number): void;
    setFontColor(color: string): void;
    setMargin(margin: string): void;
    setAlignVertical(align: string): void;
    setAlignHorizontal(align: string): void;
    setBorderCorner(borderCorner: string): void;
    setDropShadowColor(dropShadowColor: string): void;
    setDropShadowOffset(dropShadowOffset: string): void;
    setOnContextMenu(fn: (thisArg?: any) => void): void;
    setOnCommand(fn: (thisArg?: any) => void): void;
    setAttribute(name: string, value: any): void;
    setRichText(str: string | boolean): void;
    appendChild(child: DynamicElementBuilder): void;
    private initStyle;
    private initBorderStyle;
    private convertStyleUnit;
    private setBoxShadow;
    private checkCustomColor;
}
